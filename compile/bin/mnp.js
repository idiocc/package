#!/usr/bin/env node
'use strict';
const fs = require('fs');             const r=(a,c,b,d=!1,e=!1)=>{const h=b?new RegExp(`^-(${b}|-${c})`):new RegExp(`^--${c}`);c=a.findIndex(k=>h.test(k));if(-1==c)return{argv:a};if(d)return{value:!0,argv:[...a.slice(0,c),...a.slice(c+1)]};d=c+1;b=a[d];if(!b||"string"==typeof b&&b.startsWith("--"))return{argv:a};e&&(b=parseInt(b,10));return{value:b,argv:[...a.slice(0,c),...a.slice(d+1)]}},t=a=>{const c=[];for(let b=0;b<a.length;b++){const d=a[b];if(d.startsWith("-"))break;c.push(d)}return c},w=()=>{var a=v;return Object.keys(a).reduce((c,
b)=>{const d=a[b];if("string"==typeof d)return c[`-${d}`]="",c;b=d.command?b:`--${b}`;d.short&&(b=`${b}, -${d.short}`);let e=d.description;d.default&&(e=`${e}\nDefault: ${d.default}.`);c[b]=e;return c},{})};const v={input:{description:"The path to the input file.",command:!0},output:{description:"Where to save the output. By default prints to stdout.",default:"-",short:"o"},init:{description:"Initialise in the current folder.",boolean:!0,short:"i"},help:{description:"Print the help information and exit.",boolean:!0,short:"h"},version:{description:"Show the version's number and exit.",boolean:!0,short:"v"}},x=function(a={},c=process.argv){[,,...c]=c;const b=t(c);c=c.slice(b.length);let d=!b.length;return Object.keys(a).reduce(({a:e,
...h},k)=>{if(0==e.length&&d)return{a:e,...h};const p=a[k];let m;if("string"==typeof p)({value:m,argv:e}=r(e,k,p));else try{const {short:f,boolean:g,number:l,command:n,multiple:q}=p;n&&q&&b.length?(m=b,d=!0):n&&b.length?(m=b[0],d=!0):{value:m,argv:e}=r(e,k,f,g,l)}catch(f){return{a:e,...h}}return void 0===m?{a:e,...h}:{a:e,...h,[k]:m}},{a:c})}(v),y=x.input,z=x.output||"-",A=x.init,B=x.version;function C(){var a={description:"{{ description }}",example:"mnp example.txt -o out.txt",line:"mnp input [-o output] [-ihv]",usage:w()};const {usage:c={},description:b,line:d,example:e}=a;a=Object.keys(c);const h=Object.values(c),[k]=a.reduce(([f=0,g=0],l)=>{const n=c[l].split("\n").reduce((q,u)=>u.length>q?u.length:q,0);n>g&&(g=n);l.length>f&&(f=l.length);return[f,g]},[]),p=(f,g)=>{g=" ".repeat(g-f.length);return`${f}${g}`};a=a.reduce((f,g,l)=>{l=h[l].split("\n");g=p(g,k);const [n,...q]=l;g=`${g}\t${n}`;
const u=p("",k);l=q.map(D=>`${u}\t${D}`);return[...f,g,...l]},[]).map(f=>`\t${f}`);const m=[b,`  ${d||""}`].filter(f=>f?f.trim():f).join("\n\n");a=`${m?`${m}\n`:""}
${a.join("\n")}
`;return e?`${a}
  Example:

    ${e}
`:a};const {readFileSync:E,writeFileSync:F}=fs;/*
 diff package https://github.com/kpdecker/jsdiff
 BSD License
 Copyright (c) 2009-2015, Kevin Decker <kpdecker@gmail.com>
*/
const G={black:30,red:31,green:32,yellow:33,blue:34,magenta:35,cyan:36,white:37,grey:90};async function H(a){const {interval:c=250,writable:b=process.stdout}={};a="function"==typeof a?a():a;const d=b.write.bind(b);var {INDICATRIX_PLACEHOLDER:e}=process.env;if(e&&"0"!=e)return d("Initialising the package<INDICATRIX_PLACEHOLDER>"),await a;let h=1,k=`${"Initialising the package"}${".".repeat(h)}`;d(k);e=setInterval(()=>{h=(h+1)%4;k=`${"Initialising the package"}${".".repeat(h)}`;d(`\r${" ".repeat(27)}\r`);d(k)},c);try{return await a}finally{clearInterval(e),d(`\r${" ".repeat(27)}\r`)}};async function I(){const a=new Promise(c=>setTimeout(c,2E3));await H(a)};async function J(a={}){const {shouldRun:c=!0,text:b}=a;if(c)return console.log("my-new-package called with %s",b),b};if(x.help){const a=C();console.log(a);process.exit(0)}else B&&(console.log(require("../../package.json").version),process.exit(0));(async()=>{try{if(A)return await I();if(!y)throw Error("Please pass an input file.");const c=E(y,"utf8"),b=await J({shouldRun:!0,text:c});"-"==z?console.log(b):F(z,b);{const d=G.yellow;var a=d?`\x1b[${d}m${y}\x1b[0m`:y}console.error("File %s successfully processed.",a)}catch(c){process.env.DEBUG?console.error(c.stack):console.log(c.message)}})();
